{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Dynamic Settings is a lightweight, real-time configuration management service written in rust that allows you to store and update settings dynamically without redeploying your application. It provides a web-based UI and an API to manage settings efficiently.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>Real-time Configuration \u2013 Modify settings in real-time without restarting your application</li> <li>Built with Rust \u2013 Designed for speed and safety</li> <li>User-Friendly UI \u2013 Manage settings through an intuitive web interface</li> <li>API-Driven \u2013 A RESTful API for programmatic access to settings</li> </ul>"},{"location":"#quick-setup","title":"\ud83d\ude80 Quick setup","text":"<pre><code>docker pull markantipin12/dynamic-settings\n\ndocker run -d -p 18100:18100 -v db_data:/app/db markantipin12/dynamic-settings\n\nopen http://localhost:18100\n</code></pre>"},{"location":"#environment-variables","title":"\ud83d\ude48 Environment Variables","text":"<pre><code>APPLICATION_PORT=18100  # The port on which the application will run\nAPI_KEY=api-key # The API key to access the API\n</code></pre>"},{"location":"client_libraries/","title":"Client libraries","text":"<p>You can use the following client libraries to interact with the Dynamic Settings in your application:</p> <ul> <li>Python - Easy to Use Python Client just to fetch settings dynamically and save traffic.</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#with-docker","title":"With docker","text":"<pre><code>docker build -t dynamic-settings .\n\ndocker run -d -p 18100:18100 dynamic-settings\n</code></pre>"},{"location":"development/#without-docker","title":"Without docker","text":""},{"location":"development/#backend","title":"Backend","text":"<p>Run</p> <pre><code>cargo run\n</code></pre> <p>Test</p> <pre><code>cargo test\n</code></pre> <p>Linter</p> <pre><code>cargo clippy --all-targets --all-features\n</code></pre>"},{"location":"development/#frontend-ui-folder","title":"Frontend (ui folder)","text":"<p>Install dependencies</p> <pre><code>npm install\n</code></pre> <p>Run</p> <pre><code>npm start\n</code></pre> <p>Build</p> <pre><code>npm run build\n</code></pre> <p>Test</p> <pre><code>npm test\n</code></pre> <p>Linter</p> <pre><code>npm run lint\n</code></pre>"},{"location":"how_to_use/","title":"How to use","text":"<p>Dynamic Settings provides two core functionalities:</p> <ul> <li>Dynamic Configuration</li> <li>Feature Flags</li> </ul>"},{"location":"how_to_use/#dynamic-configuration","title":"\u2699\ufe0f Dynamic Configuration","text":"<p>Store any type of settings and manage them in real-time without restarting your application. Supported types:</p> <ul> <li>String</li> <li>Integer</li> <li>Float</li> <li>Boolean</li> <li>JSON (Array can be stored as well)</li> </ul> <p></p>"},{"location":"how_to_use/#feature-flags","title":"\ud83d\udea9\ufe0f Feature Flags","text":"<p>Enable or disable features in your application without redeploying it. </p>"},{"location":"how_to_use/#manage-your-settings","title":"\ud83d\udd27 Manage Your Settings","text":"<p>Monitor and update your settings seamlessly via the management interface. </p>"},{"location":"tutorials/","title":"Client libraries","text":"<p>Useful tutorials and articles on how to use the Dynamic Settings.</p> <ul> <li>Effortless Configuration: Making Your FastAPI App Dynamic</li> </ul>"}]}